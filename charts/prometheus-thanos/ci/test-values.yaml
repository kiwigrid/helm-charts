any-resource:
  enabled: true
  anyResources:
    initBucketConfigMap: |-

      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: test-minio-init
        labels:
          app: minio
          chart: minio-2.4.10
          release: test
          heritage: Tiller
      data:
        initialize: |-
          #!/bin/sh
          set -e ; # Have script exit in the event of a failed command.

          # connectToMinio
          # Use a check-sleep-check loop to wait for Minio service to be available
          connectToMinio() {
            SCHEME=$1
            ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
            set -e ; # fail if we can't read the keys.
            ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
            set +e ; # The connections to minio are allowed to fail.
            echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
            MC_COMMAND="mc config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
            $MC_COMMAND ;
            STATUS=$? ;
            until [ $STATUS = 0 ]
            do
              ATTEMPTS=`expr $ATTEMPTS + 1` ;
              echo \"Failed attempts: $ATTEMPTS\" ;
              if [ $ATTEMPTS -gt $LIMIT ]; then
                exit 1 ;
              fi ;
              sleep 2 ; # 1 second intervals between attempts
              $MC_COMMAND ;
              STATUS=$? ;
            done ;
            set -e ; # reset `e` as active
            return 0
          }

          # checkBucketExists ($bucket)
          # Check if the bucket exists, by using the exit code of `mc ls`
          checkBucketExists() {
            BUCKET=$1
            CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
            return $?
          }

          # createBucket ($bucket, $policy, $purge)
          # Ensure bucket exists, purging if asked to
          createBucket() {
            BUCKET=$1
            POLICY=$2
            PURGE=$3

            # Purge the bucket, if set & exists
            # Since PURGE is user input, check explicitly for `true`
            if [ $PURGE = true ]; then
              if checkBucketExists $BUCKET ; then
                echo "Purging bucket '$BUCKET'."
                set +e ; # don't exit if this fails
                /usr/bin/mc rm -r --force myminio/$BUCKET
                set -e ; # reset `e` as active
              else
                echo "Bucket '$BUCKET' does not exist, skipping purge."
              fi
            fi

            # Create the bucket if it does not exist
            if ! checkBucketExists $BUCKET ; then
              echo "Creating bucket '$BUCKET'"
              /usr/bin/mc mb myminio/$BUCKET
            else
              echo "Bucket '$BUCKET' already exists."
            fi

            # At this point, the bucket should exist, skip checking for existence
            # Set policy on the bucket
            echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
            /usr/bin/mc policy $POLICY myminio/$BUCKET
          }

          # Try connecting to Minio instance
          scheme=http
          connectToMinio $scheme
          createBucket demo-bucket none false

    initBucket: |-
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: test-minio-make-bucket-job
        labels:
          app: minio
          chart: minio-2.4.10
          release: test
          heritage: Tiller
      spec:
        template:
          metadata:
            labels:
              app: minio
              release: test
          spec:
            restartPolicy: OnFailure
            volumes:
              - name: minio-configuration
                projected:
                  sources:
                  - configMap:
                      name: test-minio-init
                  - secret:
                      name: test-minio
            containers:
            - name: minio-mc
              image: "minio/mc:RELEASE.2019-03-13T21-05-06Z"
              imagePullPolicy: IfNotPresent
              command: ["/bin/sh", "/config/initialize"]
              env:
                - name: MINIO_ENDPOINT
                  value: test-minio
                - name: MINIO_PORT
                  value: "9000"
              volumeMounts:
                - name: minio-configuration
                  mountPath: /config

minio:
  enabled: true
  fullnameOverride: test-minio
  accessKey: "TESTKEY"
  secretKey: "TESTDEMO"
  persistence:
    enabled: false

storeGateway:
  objStoreType: S3
  objStoreConfig:
    bucket: demo-bucket
    access_key: TESTKEY
    secret_key: TESTDEMO
    endpoint: test-minio:9000
    insecure: true

compact:
  objStoreType: S3
  objStoreConfig:
    bucket: demo-bucket
    access_key: TESTKEY
    secret_key: TESTDEMO
    endpoint: test-minio:9000
    insecure: true

ruler:
  objStoreType: S3
  objStoreConfig:
    bucket: demo-bucket
    access_key: TESTKEY
    secret_key: TESTDEMO
    endpoint: test-minio:9000
    insecure: true
