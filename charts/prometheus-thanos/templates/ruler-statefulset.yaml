apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "prometheus-thanos.fullname" . }}-ruler
  labels:
    app.kubernetes.io/name: {{ include "prometheus-thanos.name" . }}-ruler
    helm.sh/chart: {{ include "prometheus-thanos.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.ruler.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "prometheus-thanos.name" . }}-ruler
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ include "prometheus-thanos.fullname" . }}-ruler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "prometheus-thanos.name" . }}-ruler
        app.kubernetes.io/instance: {{ .Release.Name }}
        prometheus-thanos-peer: "true"
        {{- with .Values.ruler.additionalLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
        checksum/config: {{ include (print $.Template.BasePath "/ruler-configmap.yaml") . | sha256sum }}
        {{- with .Values.ruler.additionalAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      containers:
        - name: {{ .Chart.Name }}-ruler
          imagePullPolicy: {{ .Values.ruler.image.pullPolicy }}
          image: "{{ .Values.ruler.image.repository }}:{{ .Values.ruler.image.tag }}"
          args:
          - rule
          - --data-dir=/data
          - --log.level={{ .Values.ruler.logLevel }}
          - --eval-interval={{ .Values.ruler.evalInterval }}          
          - --cluster.disable
          - --rule-file=/etc/thanos-ruler/**/*.rules.yaml
          - --alertmanagers.url={{ .Values.ruler.alertmanagerUrl }}
          - --query={{ include "prometheus-thanos.fullname" . }}-querier:{{ .Values.service.querier.http.port }}
          {{- range .Values.ruler.queries }}
          - --query={{ . }}
          {{- end }}
          {{- if .Values.ruler.objStoreType }}
          - |
            --objstore.config=type: {{ .Values.ruler.objStoreType }} 
            config:
            {{- toYaml .Values.ruler.objStoreConfig | nindent 14 }}
          {{- end }}
          {{- range $key, $value := .Values.ruler.additionalFlags }}
          - --{{ $key }}{{if $value }}={{ $value }}{{end}}
          {{- end }}

          - --label=ruler_cluster="{{ .Values.ruler.clusterName }}"
          - --label=replica="$(POD_NAME)"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if .Values.ruler.extraEnv }}          
            {{- toYaml .Values.ruler.extraEnv | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
            - name: cluster
              containerPort: {{ .Values.cluster.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.ruler.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/thanos-ruler
              name: config
            - mountPath: /data
              name: storage-volume
          {{- with .Values.ruler.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.ruler.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.ruler.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.ruler.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - configMap:
            name: {{ include "prometheus-thanos.fullname" . }}-ruler
          name: config
    {{- with .Values.ruler.volumes }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- if .Values.ruler.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        {{- if .Values.ruler.persistentVolume.annotations }}
        annotations:
{{ toYaml .Values.ruler.persistentVolume.annotations | indent 10 }}
        {{- end }}
      spec:
        accessModes:
{{ toYaml .Values.ruler.persistentVolume.accessModes | indent 10 }}
        resources:
          requests:
            storage: "{{ .Values.ruler.persistentVolume.size }}"
      {{- if .Values.ruler.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.ruler.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.ruler.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
        - name: storage-volume
          emptyDir: {}
{{- end }}
